# name: Deploy to Azure VM

# on:
#   push:
#     branches:
#       - master
#   workflow_dispatch: 

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
      
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Set up Docker Compose
#         uses: docker/setup-compose-action@v1

#       - name: Set up SSH
#         uses: webfactory/ssh-agent@v0.9.0
#         with:
#           ssh-private-key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
      
#       - name: Add Azure VM to known hosts
#         run: |
#           mkdir -p ~/.ssh
#           ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts

#       - name: Set up Docker context for remote host
#         run: |
#           docker context create azure-vm --docker "host=ssh://${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }}"
#           docker context use azure-vm
      
#       - name: Deploy with docker-compose
#         run: |
#           docker compose -f docker-compose.deploy.yml down || true
#           docker compose -f docker-compose.deploy.yml pull
#           docker compose -f docker-compose.deploy.yml up --build -d
      
#       - name: Verify deployment
#         run: |
#           docker compose -f docker-compose.deploy.yml ps
      
#       - name: Reset Docker context
#         if: always()
#         run: |
#           docker context use default
#           docker context rm azure-vm

# name: Deploy to Azure VM

# on:
#   push:
#     branches:
#       - master
#   workflow_dispatch: 

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
      
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Set up Docker Compose
#         uses: docker/setup-compose-action@v1

#       - name: Set up SSH
#         uses: webfactory/ssh-agent@v0.9.0
#         with:
#           ssh-private-key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
      
#       - name: Add Azure VM to known hosts
#         run: |
#           mkdir -p ~/.ssh
#           ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts  

#       - name: Set up Docker context for remote host
#         run: |
#           # Remove existing context if it exists
#           docker context rm azure-vm 2>/dev/null || true
#           # Create new context
#           docker context create azure-vm --docker "host=ssh://${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }}"
#           docker context use azure-vm
      
#       - name: Deploy with docker-compose
#         run: |
#           docker compose -f docker-compose.deploy.yml down || true
#           docker compose -f docker-compose.deploy.yml pull || true
#           docker compose -f docker-compose.deploy.yml up --build -d
      
#       - name: Verify deployment
#         run: |
#           docker compose -f docker-compose.deploy.yml ps
#           echo "ðŸš€ Deployment completed successfully!"
      
#       - name: Reset Docker context
#         if: always()
#         run: |
#           docker context use default || true
#           docker context rm azure-vm 2>/dev/null || true

# name: Deploy to Azure VM

# on:
#   push:
#     branches:
#       - master
#   workflow_dispatch:

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
      
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Set up Docker Compose
#         uses: docker/setup-compose-action@v1

#       - name: Set up SSH
#         uses: webfactory/ssh-agent@v0.9.0
#         with:
#           ssh-private-key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
      
#       - name: Verify SSH connection
#         run: |
#           mkdir -p ~/.ssh
#           ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts
#           # Test basic SSH connection
#           ssh -T ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} exit
#           # Verify Docker is running on remote host
#           ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "docker --version && systemctl is-active docker"

#       - name: Set up Docker context
#         run: |
#           # Clean up any existing context
#           docker context rm -f azure-vm 2>/dev/null || true
#           # Create new context with 30s timeout
#           docker context create azure-vm \
#             --docker "host=ssh://${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }}" \
#             --default-stack-orchestrator swarm
#           # Verify context connection
#           docker --context azure-vm info

#       - name: Deploy with docker-compose
#         run: |
#           docker --context azure-vm compose -f docker-compose.deploy.yml down || true
#           docker --context azure-vm compose -f docker-compose.deploy.yml pull
#           docker --context azure-vm compose -f docker-compose.deploy.yml up --build -d
      
#       - name: Verify deployment
#         run: |
#           docker --context azure-vm compose -f docker-compose.deploy.yml ps
#           echo "âœ… Deployment successful"
      
#       - name: Clean up Docker context
#         if: always()
#         run: |
#           docker context use default || true
#           docker context rm -f azure-vm 2>/dev/null || true


# name: Deploy to Azure VM

# on:
#   push:
#     branches:
#       - master
#   workflow_dispatch:

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
      
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Set up Docker Compose
#         uses: docker/setup-compose-action@v1

#       - name: Set up SSH
#         uses: webfactory/ssh-agent@v0.9.0
#         with:
#           ssh-private-key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
      
#       - name: Verify SSH and Docker on Azure VM
#         run: |
#           mkdir -p ~/.ssh
#           ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts
#           # Test SSH connection and Docker availability
#           ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} \
#             "docker --version && sudo systemctl is-active docker"

#       - name: Set up Docker context
#         run: |
#           # Force remove existing context if present
#           docker context rm -f azure-vm 2>/dev/null || true
#           # Create new context without deprecated flag
#           docker context create azure-vm \
#             --docker "host=ssh://${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }}"
#           # Verify context works
#           docker --context azure-vm info

#       - name: Deploy with docker-compose
#         run: |
#           docker --context azure-vm compose -f docker-compose.deploy.yml down || true
#           docker --context azure-vm compose -f docker-compose.deploy.yml pull
#           docker --context azure-vm compose -f docker-compose.deploy.yml up --build -d
      
#       - name: Verify deployment
#         run: |
#           docker --context azure-vm compose -f docker-compose.deploy.yml ps
#           echo "âœ… Deployment successful"
      
#       - name: Clean up
#         if: always()
#         run: |
#           docker context use default
#           docker context rm -f azure-vm 2>/dev/null || true


# name: Deploy to Azure VM

# on:
#   push:
#     branches:
#       - master
#   workflow_dispatch:

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
      
#       - name: Set up Docker
#         uses: docker/setup-buildx-action@v3

#       - name: Set up SSH
#         uses: webfactory/ssh-agent@v0.9.0
#         with:
#           ssh-private-key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
      
#       - name: Verify Azure VM connectivity
#         run: |
#           mkdir -p ~/.ssh
#           ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts
          
#           # Verify SSH and Docker prerequisites
#           ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} << 'EOF'
#             sudo systemctl start docker || sudo systemctl enable --now docker
#             sudo usermod -aG docker $USER || true
#             docker --version || curl -fsSL https://get.docker.com | sudo sh
#             docker info
#           EOF

#       - name: Create Docker context
#         run: |
#           # Force-clean existing context
#           docker context rm -f azure-vm 2>/dev/null || true
          
#           # Create new context with validation
#           if ! docker context create azure-vm \
#             --docker "host=ssh://${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }}"; then
#             echo "::error::Failed to create Docker context"
#             exit 1
#           fi
          
#           # Verify context connectivity
#           if ! docker --context azure-vm info; then
#             echo "::error::Cannot connect to Docker on Azure VM"
#             exit 1
#           fi

#       - name: Deploy containers
#         run: |
#           docker --context azure-vm compose -f docker-compose.deploy.yml down || true
#           docker --context azure-vm compose -f docker-compose.deploy.yml pull --quiet
#           docker --context azure-vm compose -f docker-compose.deploy.yml up --build -d --wait

#       - name: Verify deployment
#         run: |
#           docker --context azure-vm compose -f docker-compose.deploy.yml ps
#           echo "âœ… Deployment successful"
#           docker --context azure-vm compose -f docker-compose.deploy.yml logs --tail=50

#       - name: Cleanup
#         if: always()
#         run: |
#           docker context use default
#           docker context rm -f azure-vm 2>/dev/null || true


name: Deploy to Azure VM

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
      
      - name: Add Azure VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts

      - name: Configure Docker permissions on Azure VM
        run: |
          ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} << 'EOF'
          # Ensure Docker is running
          sudo systemctl start docker || sudo systemctl enable --now docker
          
          # Add user to docker group (if not already)
          sudo usermod -aG docker $USER || true
          
          # Apply group changes immediately
          newgrp docker << 'INNER_EOF'
          # Verify Docker access
          docker info || exit 1
          INNER_EOF
          EOF

      - name: Set up Docker context for remote host
        run: |
          # Force remove existing context
          docker context rm -f azure-vm 2>/dev/null || true
          
          # Create new context
          docker context create azure-vm \
            --docker "host=ssh://${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }}"
          
          # Verify connection
          docker --context azure-vm info || (echo "::error::Docker connection failed"; exit 1)
      
      - name: Deploy with docker-compose
        run: |
          docker --context azure-vm compose -f docker-compose.deploy.yml down --remove-orphans --timeout 1 || true
          docker --context azure-vm compose -f docker-compose.deploy.yml pull
          docker --context azure-vm compose -f docker-compose.deploy.yml up --build -d --wait
      
      - name: Verify deployment
        run: |
          docker --context azure-vm compose -f docker-compose.deploy.yml ps
          docker --context azure-vm compose -f docker-compose.deploy.yml logs --tail=20
          echo "âœ… Deployment successful"
      
      - name: Reset Docker context
        if: always()
        run: |
          docker context use default
          docker context rm -f azure-vm 2>/dev/null || true

# name: Deploy to Azure VM

# on:
#   push:
#     branches:
#       - master
#   workflow_dispatch:

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
      
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Set up Docker Compose
#         uses: docker/setup-compose-action@v1

#       - name: Set up SSH
#         uses: webfactory/ssh-agent@v0.9.0
#         with:
#           ssh-private-key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
      
#       - name: Add Azure VM to known hosts
#         run: |
#           mkdir -p ~/.ssh
#           ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts

#       - name: Prepare build environment on Azure VM
#         run: |
#           ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} << 'EOF'
#           # Ensure Docker is running
#           sudo systemctl start docker || sudo systemctl enable --now docker
          
#           # Add user to docker group
#           sudo usermod -aG docker $USER || true
          
#           # Create swap space (4GB)
#           sudo fallocate -l 4G /swapfile
#           sudo chmod 600 /swapfile
#           sudo mkswap /swapfile
#           sudo swapon /swapfile
          
#           # Clean Docker resources
#           sudo docker system prune -af
          
#           # Verify memory
#           free -h
#           docker info
#           EOF

#       - name: Set up Docker context
#         run: |
#           docker context rm -f azure-vm 2>/dev/null || true
#           docker context create azure-vm \
#             --docker "host=ssh://${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }}"
#           docker --context azure-vm info || (echo "::error::Docker connection failed"; exit 1)
      
#       - name: Deploy with memory optimization
#         run: |
#           # Clean deployment with memory safeguards
#           docker --context azure-vm compose -f docker-compose.deploy.yml down --remove-orphans --timeout 1 || true
          
#           # Build with increased memory limits
#           docker --context azure-vm compose -f docker-compose.deploy.yml build \
#             --progress plain \
#             --no-cache \
#             --build-arg NODE_OPTIONS="--max-old-space-size=4096"
          
#           # Start services with health checks
#           docker --context azure-vm compose -f docker-compose.deploy.yml up -d --wait

#       - name: Verify deployment
#         run: |
#           docker --context azure-vm compose -f docker-compose.deploy.yml ps -a
#           docker --context azure-vm compose -f docker-compose.deploy.yml logs --tail=50
#           echo "âœ… Deployment successful"
          
#           # Verify swap is active
#           ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "free -h && swapon --show"

#       - name: Cleanup
#         if: always()
#         run: |
#           docker context use default
#           docker context rm -f azure-vm 2>/dev/null || true
#           # Remove swap file after deployment (optional)
#           ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "sudo swapoff /swapfile && sudo rm -f /swapfile"